<?php

<<<<<<< HEAD
=======
use Drupal\views\ViewExecutable;

>>>>>>> e5782c0467488c4ed9583877bea24221f86fafc6
/**
 * @file
 * Contains reseau_mod_up_nonindexe.module.
 */



//Modification des formulaire
function reseau_mod_up_nonindexe_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
  if (is_array($form['#theme']) && in_array('node_form', $form['#theme'])) {

<<<<<<< HEAD
    if (($form_id === 'node_page_edit_form') || ($form_id === 'node_page_form')) {

      if (!empty($form['field_contenu_indexation'])) {
        $form['mycontainer'] = [
          '#type' => 'details',
          '#group' => 'advanced', // This line places the container in the sidebar
          '#weight' => 99,  // ensure it displays last or use -10 to show it first.
          '#title' => t('Indexation de la page'),
          '#tree' => TRUE,
          '#access' => TRUE,
        ];

        $form['field_contenu_indexation']['#weight'] = -1; // reset weight 
        $form['field_contenu_indexation']['#group'] = 'mycontainer';
      }
    }
  }
}


/**
 * Implements hook_preprocess_html() for html templates.
 */
function reseau_mod_up_nonindexe_preprocess_html(array &$variables)
{
  // Add META tag title + for Page non indexées
  // Load the node entity from current route.
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node) {

    // Check if node type is basic page.
    if ($node->getType() === 'page') {
      if (!empty($node->get('field_contenu_indexation')->getValue())) {
        if ($node->get('field_contenu_indexation')->getValue()[0]['value'] === '0') {

          $variables['page']['#attached']['html_head'][] = [
            [
              '#tag' => 'meta',
              '#attributes' => [
                'name' => 'robots',
                'content' => 'noindex, nofollow, noarchive, nosnippet, noodp, noydir, noimageindex, notranslate',
              ],
            ],
            'robots',
          ];
        }
      }
=======

  if (($form_id === 'node_page_edit_form') || ($form_id === 'node_page_form')) {
    dsm($form);

    if (!empty($form['field_contenu_indexation'])) {
      $form['mycontainer'] = [
        '#type' => 'details',
        '#group' => 'advanced', // This line places the container in the sidebar
        '#weight' => 99,  // ensure it displays last or use -10 to show it first.
        '#title' => t('Indexation de la page'),
        '#tree' => TRUE,
        '#access' => TRUE,
      ];
    

      $form['field_contenu_indexation']['#weight'] = -1; // reset weight 
      $form['field_contenu_indexation']['#group'] = 'mycontainer';

      // $form['#after_build'][] = 'indexation_after_build';
    }

 

  }

  }
  }


  function reseau_mod_up_nonindexe_node_presave(\Drupal\Core\Entity\EntityInterface $entity) {
  
    if ($entity->bundle() == 'page') {
    
      // dsm($entity->get('field_contenu_indexation')->getValue());

      if (!empty($entity->get('field_contenu_indexation')->getValue())) {
        if ($entity->get('field_contenu_indexation')->getValue()[0]['value']=== '0') {
          // dsm($entity->get('_index_now'));
/** @var \Drupal\simple_sitemap\Manager\Generator $generator */
          $generator = \Drupal::service('simple_sitemap.generator');
          $sitemap_settings = $generator
         ->entityManager()
  ->getEntityInstanceSettings('node', '509');
          dsm($sitemap_settings);

          $sitemap_new_settings = ['index'=>false];
          dsm($sitemap_new_settings);

          $generator
         ->entityManager()
  ->setEntityInstanceSettings('node', '509', $sitemap_new_settings);
  

        $sitemap_settings = $generator
        ->entityManager()
 ->getEntityInstanceSettings('node', '509');
         dsm($sitemap_settings);
        }
      }
      // dsm($entity);
      // $route_match = \Drupal::routeMatch();
      // \Drupal::service('content_translation.synchronizer')
      //   ->synchronizeFields($entity, $entity
      //   ->language()
      //   ->getId(), $route_match
      //   ->getParameter('source_langcode'));
    }
  }
/**
 * After build callback for field_text_content.
 * 
 * @param array $element
 *   Array element.
 * @param $form_state
 *   Form state.
 *
 * @return array
 *   New element.
 */
function indexation_after_build(array $element, \Drupal\Core\Form\FormStateInterface $form_state)
{
  // dsm($element);
  // $indexation = $element['#attached']['drupalSettings']['reseau_mod']['recherche'];
  return $element;
}

  /**
 * Implements hook_preprocess_html() for html templates.
 */
function reseau_mod_up_nonindexe_preprocess_html(array &$variables) {
  // Add META tag title + description for Basic Page node fields.
  // This assumes the 'body' field is present and populated.
  // Load the node entity from current route.
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node) {
    // dsm($node);
    // dsm($node->get('field_contenu_indexation')->getValue());
    // Check if node type is basic page.
    if ($node->getType() === 'page') {
      if (!empty($node->get('field_contenu_indexation')->getValue())) {
    if ($node->get('field_contenu_indexation')->getValue()[0]['value']=== '0') {
      // dsm($variables['page']['#attached']['html_head']);

      $variables['page']['#attached']['html_head'][] = [
        [
          '#tag' => 'meta',
          '#attributes' => [
            'name' => 'robots',
            'content' => 'noindex, nofollow, noarchive, nosnippet, noodp, noydir, noimageindex, notranslate',
          ],
        ],
        'robots',
      ];
      // dsm($variables['page']['#attached']['html_head']);
      // $variables['page']['#attached']['html_head'][] = [
      //   [
      //     '#tag' => 'meta',
      //     '#attributes' => [
      //       'name' => 'description',
      //       // Get 160 characters from Body field, strip tags
      //       'content' => strip_tags(substr($node->get('body')->value, 0, 160)) . '...',
      //     ],
      //   ],
      //   'description',
      // ];
    }
    }
>>>>>>> e5782c0467488c4ed9583877bea24221f86fafc6
    }
  }
}
function reseau_mod_up_nonindexe_page_attachments_alter(array &$attachments)
{
<<<<<<< HEAD
=======

>>>>>>> e5782c0467488c4ed9583877bea24221f86fafc6
  /*ajoute css admin*/
  $admin_theme = \Drupal::config('system.theme')->get('admin');
  $admin_theme_name = \Drupal::service('theme_handler')->getName($admin_theme);
  if ($admin_theme_name == 'Seven') {
    $attachments['#attached']['library'][] = 'reseau_mod_up_nonindexe/extra.indexation';
  }
}

<<<<<<< HEAD

/**
 * Implements hook_preprocess_menu().
 *
 * @param array[] $variables
 */
function reseau_mod_up_nonindexe_preprocess_menu(&$variables) {
  $current_user = \Drupal::entityTypeManager()->getStorage('user')->load(\Drupal::currentUser()->id());
      if (($current_user->hasRole('administrator')) || ($current_user->id() == '1')) {
        return;
      } else {
    // if (isset($variables['menu_name']) && $variables['menu_name'] === 'admin') {
    //   foreach($variables['items'] as $key => $item) {
  
    // if($variables['items'][$key]['title'] == 'Configuration'){
    //   dsm( $variables['items']);
    // }

    // }
    // }
    unset($variables['items']['system.admin_config']);
  }
  // }
}
=======
/**
 * Alter the generated link data before the sitemap is saved.
 * This hook gets invoked for every sitemap chunk generated.
 *
 * @param array &$links
 *   Array containing multilingual links generated for each path to be indexed
 *
 * @param string|null $sitemap_variant
 */
function reseau_mod_up_nonindexe_simple_sitemap_links_alter(array &$links, $sitemap_variant) {

  // Remove German URL for a certain path in the hreflang sitemap.
  foreach ($links as $key => $link) {
    if ($link['meta']['path'] === 'node/509') {

      dsm($link);

      // // Remove 'loc' URL if it points to a german site.
      // if ($link['langcode'] === 'de') {
      //   unset($links[$key]);
      // }

      // // If this 'loc' URL points to a non-german site, make sure to remove
      // // its german alternate URL.
      // else {
      //   if ($link['alternate_urls']['de']) {
      //     unset($links[$key]['alternate_urls']['de']);
      //   }
      // }
    }
  }
}

//   if (($form_id === 'node_evenement_edit_form') || ($form_id === 'node_evenement_form')) {




//     $form['field_act_structure_concernee']['#states'] = [
//       'visible' => [
//         ':input[name="field_structure_associee"]' => ['value' => '8'],
//       ],
//     ];
//         /* Retire option réseau dans structure concernée */
// if (isset($form['field_act_structure_concernee']['widget'])) {
//   unset($form['field_act_structure_concernee']['widget']['#options']['8']);
// }
//   }
 





>>>>>>> e5782c0467488c4ed9583877bea24221f86fafc6
